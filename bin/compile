#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

BUILD_DIR=$1
CACHE_DIR=$2

TEXLIVE_DOMAIN="https://heroku-buildpack-tex.s3.amazonaws.com"
VERSION=`curl $TEXLIVE_DOMAIN/VERSION -s`
TEXLIVE_URL="$TEXLIVE_DOMAIN/texlive-$VERSION.tar.gz"
TEXLIVE_HOME=$BUILD_DIR/.texlive
TEXLIVE_CACHE=$CACHE_DIR/.texlive
PATH=$TEXLIVE_HOME/bin/x86_64-linux:$PATH
PROFILE_D=$BUILD_DIR/.profile.d/texlive
DOCUMENT="document.tex"

# Output helpers
function build-step (){ echo "-----> $@"; }
function build-warn (){ echo " !     $@"; }
function build-info (){ echo "       $@"; }

# Prepare the various paths
mkdir -p $TEXLIVE_HOME
mkdir -p $TEXLIVE_CACHE
mkdir -p `dirname $PROFILE_D`

if [ -f $TEXLIVE_CACHE/VERSION ] && (( $VERSION == `cat $TEXLIVE_CACHE/VERSION` )); then
    # Get TeX Live from the cache if possible
    build-step "Installing TeX Live $VERSION from cache"
    cp -R $TEXLIVE_CACHE/* $TEXLIVE_HOME
else
    # Get TeX Live from S3 if necessary
    if [ -f "$TEXLIVE_CACHE/VERSION" ]; then
        build-step "Upgrading to TeX Live $VERSION"
    else
        build-step "Fetching TeX Live $VERSION"
    fi

    curl $TEXLIVE_URL -s -o - | tar xzf - -C $TEXLIVE_HOME

    # Make sure the cache is empty
    rm -rf $TEXLIVE_CACHE/*

    # Store a copy of it in the cache so it doesn't have to be fetched again
    cp -R $TEXLIVE_HOME/* $TEXLIVE_CACHE

    # Store the version for later
    echo $VERSION > $TEXLIVE_CACHE/VERSION
fi

# Check for an essential binary to make sure it's installed
if [ ! `which pdflatex` ]; then
    build-warn "TeX Live installation failed"
    exit 1
fi

# Check for the existence of a suitable TeX document
cd $BUILD_DIR
if [ ! -f $DOCUMENT ]; then
    build-warn "$DOCUMENT not found." && exit 1
fi

# Attempt to build the document into a PDF
build-step "Building $DOCUMENT"
OPTIONS="--interaction=nonstopmode -file-line-error"
WRITTEN=`pdflatex $OPTIONS $DOCUMENT | grep "^Output written"`

# Bail out if something went wrong
if [ ! "$WRITTEN" ]; then
    TEX_LOG=`echo $DOCUMENT | sed 's/\.tex$/.log/'`

    # Save logs to a file to loop over them more reliably
    ERROR_LOG=`mktemp`

    # Read out just the error messages and locations
    grep "^\./$DOCUMENT:" $TEX_LOG | sed 's/^..//' > $ERROR_LOG

    while read -r line; do
        LINE_NO=`echo $line | cut -d: -f2`

        # Ignore multiple messages per line
        if [ "$LINE_NO" != "$PREV_LINE_NO" ]; then
            # Send feedback to the user
            build-warn "$line"
        fi
        PREV_LINE_NO="$LINE_NO"
    done < $ERROR_LOG

    # Clean up after ourselves
    rm $ERROR_LOG
    exit 1
fi

# Give some feedback to the user
OUTPUT_FILENAME=`echo $WRITTEN | sed 's/.*on \(.\+pdf\).*/\1/'`
PAGES=`echo $WRITTEN | sed 's/.* .\([0-9]\+ pages\?\),.*/\1/'`
build-info "Wrote $PAGES to $OUTPUT_FILENAME"

# Set up the environment for runtimes now that compilation has finished
echo "PATH=~/.texlive/bin/x86_64-linux:$PATH" >> $BUILD_DIR/.profile.d/texlive
